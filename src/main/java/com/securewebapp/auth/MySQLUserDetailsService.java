package com.securewebapp.auth;

import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.*;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

// service that performs db interactions
//@Lazy //tried this to fix circular dependency issue
@Service
public class MySQLUserDetailsService implements UserDetailsService {

	@Autowired
	private UserRepository userRepository; //connection to the db

	
	private PasswordEncoder passwordEncoder; //password encryption methods

	//constructor
	// public MySQLUserDetailsService(PasswordEncoder passwordEncoder) {
    //     this.passwordEncoder = passwordEncoder;
    // }

    //loads a user by username
	@Override
	public UserDetails loadUserByUsername(String username) {

		User user = userRepository.findByUsername(username); //user object generated by the given username

		if (user == null) { //throws an exception if the returned user is null
			throw new UsernameNotFoundException(username);
		}
		return new org.springframework.security.core.userdetails.User(
			user.getUsername(),
			user.getPassword(),
			getAuthorities()
		); //???
	}

	// CHATGPT's preferred method for loading users
	// @Override
    // public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        
	// 	String encodedPassword = passwordEncoder.encode("password");

    //     return org.springframework.security.core.userdetails.User.withUsername(username)
    //             .password(encodedPassword)
    //             .roles("USER")
    //             .build();
    // }

	//PROBLEM: circular dependency: the websecurityconfig also depends on this service to configure authentication
    //saves a new user to the db; encrypts the given password before saving to the database
	public UserDetails Save(User newUser) {
		newUser.setPassword(passwordEncoder.encode(newUser.getPassword())); //a password has been set already during new user registration; this step overrides that password with an encoded version of that password
		User savedUser = userRepository.save(newUser);
		return new org.springframework.security.core.userdetails.User(
			savedUser.getUsername(),
			savedUser.getPassword(),
			getAuthorities()
		);
	}

    //retrieves the authorities for the user; by default, it selects 'ROLE_USER'
	private List<SimpleGrantedAuthority> getAuthorities() {
		List<SimpleGrantedAuthority> authList = new ArrayList<>();
		authList.add(new SimpleGrantedAuthority("ROLE_USER"));
		return authList;
	}

}